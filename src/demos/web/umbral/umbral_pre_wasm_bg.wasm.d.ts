/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_secretkey_free: (a: number, b: number) => void;
export const secretkey_random: () => number;
export const secretkey_toBEBytes: (a: number) => [number, number];
export const secretkey_fromBEBytes: (a: number, b: number) => [number, number, number];
export const secretkey_publicKey: (a: number) => number;
export const secretkey_toString: (a: number) => [number, number];
export const secretkey_equals: (a: number, b: number) => number;
export const __wbg_secretkeyfactory_free: (a: number, b: number) => void;
export const secretkeyfactory_random: () => number;
export const secretkeyfactory_fromSecureRandomness: (a: number, b: number) => [number, number, number];
export const secretkeyfactory_makeSecret: (a: number, b: number, c: number) => [number, number];
export const secretkeyfactory_makeKey: (a: number, b: number, c: number) => number;
export const secretkeyfactory_makeFactory: (a: number, b: number, c: number) => number;
export const secretkeyfactory_toString: (a: number) => [number, number];
export const publickey___getClassname: (a: number) => [number, number];
export const __wbg_publickey_free: (a: number, b: number) => void;
export const publickey_toCompressedBytes: (a: number) => [number, number];
export const publickey_fromCompressedBytes: (a: number, b: number) => [number, number, number];
export const publickey_recoverFromPrehash: (a: number, b: number, c: number) => [number, number, number];
export const publickey_toString: (a: number) => [number, number];
export const publickey_equals: (a: number, b: number) => number;
export const __wbg_signer_free: (a: number, b: number) => void;
export const signer_new: (a: number) => number;
export const signer_sign: (a: number, b: number, c: number) => number;
export const signer_verifyingKey: (a: number) => number;
export const signer_toString: (a: number) => [number, number];
export const __wbg_signature_free: (a: number, b: number) => void;
export const signature_verify: (a: number, b: number, c: number, d: number) => number;
export const signature_toDerBytes: (a: number) => [number, number];
export const signature_fromDerBytes: (a: number, b: number) => [number, number, number];
export const signature_toBEBytes: (a: number) => [number, number];
export const signature_fromBEBytes: (a: number, b: number) => [number, number, number];
export const signature_toString: (a: number) => [number, number];
export const signature_equals: (a: number, b: number) => number;
export const __wbg_recoverablesignature_free: (a: number, b: number) => void;
export const recoverablesignature_toBEBytes: (a: number) => [number, number];
export const recoverablesignature_fromBEBytes: (a: number, b: number) => [number, number, number];
export const recoverablesignature_toString: (a: number) => [number, number];
export const recoverablesignature_equals: (a: number, b: number) => number;
export const capsule___getClassname: (a: number) => [number, number];
export const __wbg_capsule_free: (a: number, b: number) => void;
export const capsule_toBytes: (a: number) => [number, number, number, number];
export const capsule_toBytesSimple: (a: number) => [number, number];
export const capsule_fromBytes: (a: number, b: number) => [number, number, number];
export const capsule_toString: (a: number) => [number, number];
export const capsule_equals: (a: number, b: number) => number;
export const __wbg_capsulefrag_free: (a: number, b: number) => void;
export const capsulefrag_verify: (a: number, b: number, c: number, d: number, e: number) => [number, number, number];
export const capsulefrag_toBytes: (a: number) => [number, number, number, number];
export const capsulefrag_toBytesSimple: (a: number) => [number, number];
export const capsulefrag_fromBytes: (a: number, b: number) => [number, number, number];
export const capsulefrag_toString: (a: number) => [number, number];
export const capsulefrag_skipVerification: (a: number) => number;
export const capsulefrag_equals: (a: number, b: number) => number;
export const verifiedcapsulefrag___getClassname: (a: number) => [number, number];
export const __wbg_verifiedcapsulefrag_free: (a: number, b: number) => void;
export const verifiedcapsulefrag_toBytes: (a: number) => [number, number, number, number];
export const verifiedcapsulefrag_toBytesSimple: (a: number) => [number, number];
export const verifiedcapsulefrag_toString: (a: number) => [number, number];
export const verifiedcapsulefrag_equals: (a: number, b: number) => number;
export const encrypt: (a: number, b: number, c: number) => [number, number, number];
export const decryptOriginal: (a: number, b: number, c: number, d: number) => [number, number, number, number];
export const decryptReencrypted: (a: number, b: number, c: number, d: any, e: number, f: number) => [number, number, number, number];
export const __wbg_keyfrag_free: (a: number, b: number) => void;
export const keyfrag_verify: (a: number, b: number, c: any, d: any) => [number, number, number];
export const keyfrag_toBytes: (a: number) => [number, number, number, number];
export const keyfrag_fromBytes: (a: number, b: number) => [number, number, number];
export const keyfrag_toString: (a: number) => [number, number];
export const keyfrag_skipVerification: (a: number) => number;
export const keyfrag_equals: (a: number, b: number) => number;
export const verifiedkeyfrag___getClassname: (a: number) => [number, number];
export const __wbg_verifiedkeyfrag_free: (a: number, b: number) => void;
export const verifiedkeyfrag_toBytes: (a: number) => [number, number, number, number];
export const verifiedkeyfrag_toString: (a: number) => [number, number];
export const verifiedkeyfrag_equals: (a: number, b: number) => number;
export const generateKFrags: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => any;
export const reencrypt: (a: number, b: number) => number;
export const __wbg_curvepoint_free: (a: number, b: number) => void;
export const curvepoint_coordinates: (a: number) => any;
export const __wbg_parameters_free: (a: number, b: number) => void;
export const parameters_new: () => number;
export const parameters_u: (a: number) => number;
export const __wbg_reencryptionevidence_free: (a: number, b: number) => void;
export const reencryptionevidence_new: (a: number, b: number, c: number, d: number, e: number) => [number, number, number];
export const reencryptionevidence_toBytes: (a: number) => [number, number, number, number];
export const reencryptionevidence_fromBytes: (a: number, b: number) => [number, number, number];
export const reencryptionevidence_ez: (a: number) => number;
export const reencryptionevidence_e1: (a: number) => number;
export const reencryptionevidence_e1h: (a: number) => number;
export const reencryptionevidence_e2: (a: number) => number;
export const reencryptionevidence_v: (a: number) => number;
export const reencryptionevidence_vz: (a: number) => number;
export const reencryptionevidence_v1: (a: number) => number;
export const reencryptionevidence_v1h: (a: number) => number;
export const reencryptionevidence_v2: (a: number) => number;
export const reencryptionevidence_uz: (a: number) => number;
export const reencryptionevidence_u1: (a: number) => number;
export const reencryptionevidence_u1h: (a: number) => number;
export const reencryptionevidence_u2: (a: number) => number;
export const reencryptionevidence_kfragValidityMessageHash: (a: number) => any;
export const reencryptionevidence_kfragSignatureV: (a: number) => number;
export const verifiedcapsulefrag_unverify: (a: number) => number;
export const reencryptionevidence_e: (a: number) => number;
export const secretkeyfactory_seedSize: () => number;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __externref_table_dealloc: (a: number) => void;
export const __wbindgen_start: () => void;
